% This file track a few addresses and values

@Hook 18CBA4 % 8025E2C4 % Used when Mario wins a battle
{
PUSH	RA, A0, A1, A2, A3, V0, V1, S0, S1
JAL		$Function_CheckCoinQuicker
NOP
POP		RA, A0, A1, A2, A3, V0, V1, S0, S1
ADDIU	A0, R0, 1
J		8025E2CC
LUI		AT, 802A 
}%/

% This Function give a 2x coin boost if the player finished a fight without getting harmed
% The one that give you all other coins boosts is in ExtraDifficulties.patch - Hook 1AB2A8 % 8027C9C8
%
% Also you can found a lot of unused code here because Coin Quicker got changed from "get double coins if you win a battle in the 1st turn"
#new:Function $Function_CheckCoinQuicker
{
PUSH    RA
LABU	S1, 800DC0E8 	% Current Coins gained in battle
JAL     $Function_GiveCoinBoost_CoinQuicker
NOP
% Check 255 gained cap
SLTIU	S0, S1, 100	 	% Current gained are less than 256?
BNE		S0, R0, .StoreGained1
NOP
ORI 	S1, R0, FF	 	% Lock the gained value to 255 if the player got +255 coins
.StoreGained1
SAB		S1, 800DC0E8 % save gained coins
.Pop
POP     RA
JR	    RA
NOP
}

#new:Function $Function_GiveCoinBoost_CoinQuicker
{
    % S1 = Current coins cained
    % The player is inside the Pit?
    PUSH    RA, A0, A1, A2, A3, V0, V1
    JAL		$IsBadgeEquiped % Save a bool inside A0
    ADDIU	A0, R0, 0150	% A0, R0, XX = Badge ID
    BEQ		A0, R0, .End
    NOP
    LABU	T0, 800DC0EB % Mario's Damage
    BNE		T0, R0, .End
    NOP
    % Making Calculation
    ORI     T0, R0, 2 % get 50%
    DIV     S1, T0 % Coins / 2 = 50%
    MFLO    T0
    ADDU    S1, S1, T0 % Coins+50% = 1.5x Coins
    % Playing Sound and Confetti
    JAL		$Function_RunScript_Confetti
    CLEAR 	A1
    .End
    POP     RA, A0, A1, A2, A3, V0, V1
    JR      RA
    NOP
}

#new:Function $IsBadgeEquiped
{
PUSH	S1, S2, S3
.Init
LIO		S2, 8010F498	% position in list
ADDIU	S3, S2, 78		% end of list
.Loop
LH		S1, 0 (S2)
BEQL	A0, S1, .End
ADDIU	A0, R0, 1 % return true
BNE		S2, S3, .Loop
ADDIU	S2, S2, 2
ADDIU	A0, R0, 0 % return false
.End
POP		S1, S2, S3
JR		RA
NOP
}

#new:Function $Function_RunScript_Confetti
{
PUSH	RA, V0, V1
CLEAR	A2
LIA		A0, $Script_PlayFX_Confetti
JAL		~Func:start_script
ADDIU	A1, R0, 1
POP		RA, V0, V1
JR 		RA
NOP
}

#new:Script:Global $Script_PlayFX_Confetti
{
Set     *Flag_Cheev_Global_22 .True % Challenge Completed
Call	PlaySound		( 34B ) % Fan Fare
Set		*Var[2] FFFFFFFE % Z
% 1st Blast
Set		*Var[1] 3E 		 % Y
Call	RandInt ( 32 *Var[3] )
Sub		*Var[1] *Var[3]
Set		*Var[0] FFFFFFDD % X%/
Wait	5
Call    PlayEffect  	( ~FX:Confetti:Burst2 *Var[0] *Var[1] *Var[2] 1 14 ) % FX_ID XYZ ? FX_Size
% 2nd Blast
Set		*Var[1] 3E 		 % Y
Call	RandInt ( 32 *Var[3] )
Sub		*Var[1] *Var[3]
Set		*Var[0] FFFFFFA4 % X%/
Wait	5
Call    PlayEffect  	( ~FX:Confetti:Burst2 *Var[0] *Var[1] *Var[2] 1 14 ) % FX_ID XYZ ? FX_Size
% 3rd Blast
Set		*Var[1] 3E 		 % Y
Call	RandInt ( 32 *Var[3] )
Sub		*Var[1] *Var[3]
Set		*Var[0] FFFFFF60 % X%/
Wait	5
Call    PlayEffect  	( ~FX:Confetti:Burst2 *Var[0] *Var[1] *Var[2] 1 14 ) % FX_ID XYZ ? FX_Size
Return
End
}

%% Track Final Results on a Pit Playthrough - START

#new:Data $TotalDamage_Dealt
{
0000
}

#new:Data $TotalDamage_Received
{
0000
}

#new:Data $TotalItemsUsed
{
00
}

#new:Data $TotalFloors
{
0000
}

#new:Data $Timer_Total
{
00000000
}

#new:Data $Timer_Floor
{
00000000
}

#new:Data $Timer_Floor_Highest
{
00000000
}

#new:Data $Timer_Speed % unused
{
00
}

#export $TotalDamage_Dealt
#export $TotalDamage_Received
#export $TotalItemsUsed
% Amount of Floors the player arrived on that Playthrough
#export $TotalFloors
% Timer for the entire playthrough
#export $Timer_Total
% Timer to track just the time at the current floor
#export $Timer_Floor
% Highest time inside a floor
#export $Timer_Floor_Highest
#export $Timer_Speed

% 800DC1F1 - Damage Amount from the Damage Indicator shown in Battle (Is used between all Actors)
% Track Total Damage Dealt and Received inside a Pit Playthrough, it doesn't track when a partner is damaged but whatever
% ~Func:calc_player_damage_enemy
@Hook 1A0CD4 % 802723F4 % Mario's Hook
{
% V0 = Damage Dealt
PUSH	V1
JAL     $Function_CheckPitFlag % Save in V1
NOP
BEQ     V1, R0, .End % If the player isn't inside the Pit go to End
NOP
LAHU    T0, $TotalDamage_Dealt
ADDU    T0, T0, V0 % Sum current Damage Dealt in the Total one
SAH     T0, $TotalDamage_Dealt
LAHU    T0, 80356038 % Damage Dealt (Entire Game)
ADDU    T0, T0, V0
SAH     T0, 80356038
.End
POP     V1
SH      V0, 0180 (S4) % Amount Dealt
SH	    V0, 01F8 (S3)
% Check Mirror Flag
PUSH    RA, A0, A1, A2, A3, V0, V1
LIO     A1, *Flag_DimentiosShield
JAL     ~Func:get_variable
RESERVED
COPY    GP, V0 % Push V0
POP     RA, A0, A1, A2, A3, V0, V1
BNE     GP, R0, .MirrorShield
NOP
J       802723FC
NOP
.MirrorShield
PUSH    RA, A0, A1, A2, A3, V0, V1
CLEAR	A2
LIA		A0, $Script_ReflectMariosAttack0
JAL		~Func:start_script
ADDIU	A1, R0, 1
POP     RA, A0, A1, A2, A3, V0, V1
J       8027318C % skip to the end of ~Func:calc_player_damage_enemy
NOP
}%/

@Hook 1A7054 % 80278774 % Zap Tap/Volt Shroom
{
PUSH	RA, V1
JAL     $Function_CheckPitFlag % Save in V1
NOP
BEQ     V1, R0, .End % If the player isn't inside the Pit go to End
NOP
LAHU    T0, $TotalDamage_Dealt
ADDU    T0, T0, V0 % Sum current Damage Dealt in the Total one
SAH     T0, $TotalDamage_Dealt
LAHU    T0, 80356038 % Damage Dealt (Entire Game)
ADDU    T0, T0, V0
SAH     T0, 80356038
.End
POP     RA, V1
SH	    V0, 0180 (S3) % Amount Dealt
J       8027877C
SH	    V0, 01F8 (S0)
}%/

% ~Func:calc_item_damage_enemy
@Hook 180394 % 80251AB4 % Star Powers and Items
{
PUSH	RA, V1
JAL     $Function_CheckPitFlag % Save in V1
NOP
BEQ     V1, R0, .End % If the player isn't inside the Pit go to End
NOP
LAHU    T0, $TotalDamage_Dealt
ADDU    T0, T0, V0 % Sum current Damage Dealt in the Total one
SAH     T0, $TotalDamage_Dealt
LAHU    T0, 80356038 % Damage Dealt (Entire Game)
ADDU    T0, T0, V0
SAH     T0, 80356038
.End
POP     RA, V1
SH      V0, 0180 (S4) % Amount Dealt
SH	    V0, 01F8 (S3)
% Check Mirror Flag
PUSH    RA, A0, A1, A2, A3, V0, V1
LIO     A1, *Flag_DimentiosShield
JAL     ~Func:get_variable
RESERVED
COPY    GP, V0 % Push V0
POP     RA, A0, A1, A2, A3, V0, V1
BNE     GP, R0, .MirrorShield
NOP
J       80251ABC
NOP
.MirrorShield
PUSH    RA, A0, A1, A2, A3, V0, V1
CLEAR	A2
LIA		A0, $Script_ReflectMariosAttack0
JAL		~Func:start_script
ADDIU	A1, R0, 1
POP     RA, A0, A1, A2, A3, V0, V1
J       802526F8 % skip to the end of ~Func:calc_item_damage_enemy
NOP
}%/

% ~Func:calc_partner_damage_enemy
@Hook 1AD468 % 8027EB88 % Partners Hook
{
PUSH	RA, V1
JAL     $Function_CheckPitFlag % Save in V1
NOP
BEQ     V1, R0, .End % If the player isn't inside the Pit go to End
NOP
LAHU    T0, $TotalDamage_Dealt
ADDU    T0, T0, V0 % Sum current Damage Dealt in the Total one
SAH     T0, $TotalDamage_Dealt
LAHU    T0, 80356038 % Damage Dealt (Entire Game)
ADDU    T0, T0, V0
SAH     T0, 80356038
.End
POP     RA, V1
SH      V0, 0180 (S4) % Amount Dealt
SH	    V0, 01F8 (S3)
% Check Mirror Flag
PUSH    RA, A0, A1, A2, A3, V0, V1
LIO     A1, *Flag_DimentiosShield
JAL     ~Func:get_variable
RESERVED
COPY    GP, V0 % Push V0
POP     RA, A0, A1, A2, A3, V0, V1
BNE     GP, R0, .MirrorShield
NOP
J       8027EB90
NOP
.MirrorShield
PUSH    RA, A0, A1, A2, A3, V0, V1
CLEAR	A2
LIA		A0, $Script_ReflectPartnerAttack0
JAL		~Func:start_script
ADDIU	A1, R0, 1
POP     RA, A0, A1, A2, A3, V0, V1
J       8027F998 % skip to the end of ~Func:calc_partner_damage_enemy
NOP
}%/

#new:Script:Battle $Script_ReflectMariosAttack0
{
    ExecWait $Script_ReflectMariosAttack
    Return
    End
}

#new:Script:Battle $Script_ReflectPartnerAttack0
{
    ExecWait $Script_ReflectPartnerAttack
    Return
    End
}

% PlayEffect is supposed to save the pointer of the FX in Var[F], although this doesn't happen always
% this patches fixes that, this is neccesary for the reflect scripts.
@Data FE040 % 802D9690
{
    10400005 % BEQZ	V0, 802D96A8
}

@Function FE054 % 802D96A4
{
    DADDU	A2, V0, R0
}

#new:Script:Battle $Script_ReflectMariosAttack
{
    Call    GetActorPos  ( .Actor:Player *Var[0] *Var[1] *Var[2] )
    Call 	$ReadAddress ( 800DC1F1 0 *Var[3] .False .False ) % get damage to dealt
    If *Var[3] <= 0
        Return
    EndIf
    Set     *Flag_DimentiosShield .False
    Call    PlayEffect   ( ~FX:ShowDamageAmount *Var[0] *Var[1] *Var[2] 10` -50` *Var[3] 0 0 0 0 0 0 )
    Set     *Var[E] *Var[F] % save fxPointer
    % Sub HP
    Call    $ReadAddress ( 8010F292 0 *Var[0] .False .False ) % get player HP
    Sub     *Var[0] *Var[3]
    If *Var[0] < 0
        Set *Var[0] 0
    EndIf
    Call    $WriteAddress ( 8010F292 0 *Var[0] .False .False )
    Call    GetAnimation ( .Actor:Player 0 *Var[4] )
    SetGroup 0
    SuspendAll 2
    Set *Var[3] .Actor:Player
    ExecWait $DoMirrorHit
    ResumeAll 2
    Call    SetAnimation ( .Actor:Player 0 *Var[4] )
    % ActorPointerData(+220) = buff fx byte flag
    Call 	$WriteAddress ( 800DC150 0 .False 220 .True ) % turn buff FX off
    Thread
        Wait    20`
        Call    RemoveEffect ( *Var[E] )
    EndThread
    Return
    End
}

#new:Script:Battle $Script_ReflectPartnerAttack
{
    Call    GetActorPos  ( .Actor:Partner *Var[0] *Var[1] *Var[2] )
    Call 	$ReadAddress ( 800DC1F1 0 *Var[3] .False .False ) % get damage to dealt
    If *Var[3] <= 0
        Return
    EndIf
    Set     *Flag_DimentiosShield .False
    Call    PlayEffect   ( ~FX:ShowDamageAmount *Var[0] *Var[1] *Var[2] 10` -50` *Var[3] 0 0 0 0 0 0 )
    Set     *Var[E] *Var[F] % save fxPointer
    % Hurt Partner
    Call    $ReadAddress ( 800DC14C 0 *Var[0] 216 .True )
    Add     *Var[0] *Var[3]
    Call    $WriteAddress ( 800DC14C 0 .Status:Daze 216 .True ) % set partner status as daze
    Call    $WriteAddress ( 800DC14C 0 *Var[0] 217 .True ) % set amount of turns to wait
    Call    GetAnimation ( .Actor:Partner -1 *Var[4] )
    SetGroup 0
    SuspendAll 2
    Set *Var[3] .Actor:Partner
    ExecWait $DoMirrorHit
    ResumeAll 2
    Call    SetAnimation ( .Actor:Partner -1 *Var[4] )
    % ActorPointerData(+220) = buff fx byte flag
    Call 	$WriteAddress ( 800DC150 0 .False 220 .True ) % turn buff FX off
    Thread
        Wait    20`
        Call    RemoveEffect ( *Var[E] )
    EndThread
    Call    8026777C % update status icons
    Return
    End
}

% var3 = ActorID
#new:Script:Battle $DoMirrorHit
{
    If *Var[3] == .Actor:Player
        Call    SetAnimation ( *Var[3] 0 00010017 ) % hurt
    Else % Partners
        Call $ReadAddress ( 8010F2A2 0 *Var[0] .False .False ) % load current partner
        Switch *Var[0]
            Case == .Partner:Goombario
                Call    SetAnimation ( *Var[3] -1 0009000A )
            Case == .Partner:Kooper
                Call    SetAnimation ( *Var[3] -1 000A0011 )
            Case == .Partner:Bombette
                Call    SetAnimation ( *Var[3] -1 000B0012 )
            Case == .Partner:Parakarry
                Call    SetAnimation ( *Var[3] -1 000C000E )
            Case == .Partner:Bow
                Call    SetAnimation ( *Var[3] -1 000D0015 )
            Case == .Partner:Watt
                Call    SetAnimation ( *Var[3] -1 000E000C )
            Case == .Partner:Sushie
                Call    SetAnimation ( *Var[3] -1 000F0010 )
            Case == .Partner:Lakilester
                Call    SetAnimation ( *Var[3] -1 0010000A )
        EndSwitch
    EndIf
    Call    GetActorPos  ( *Var[3] *Var[0] *Var[1] *Var[2] )
    Add     *Var[1] 13` % y
    Call    PlayEffect   ( ~FX:Firework:White *Var[0] *Var[1] *Var[2] *Fixed[0.7] 0 0 0 0 0 0 0 0 )
    Call    PlaySoundAtActor ( *Var[3] 00FE )
    Call    GetActorPos  ( *Var[3] *Var[0] *Var[1] *Var[2] )
    Loop 2
        Sub *Var[1] 2
        Call SetActorPos ( *Var[3] *Var[0] *Var[1] *Var[2] )
        Wait 5
        Add *Var[1] 2
        Call SetActorPos ( *Var[3] *Var[0] *Var[1] *Var[2] )
        Wait 5
    EndLoop
    Return
    End
}

@Hook 1A6444 % 80277B64 % Enemies Hook
{
PUSH	RA, V1
JAL     $Function_CheckPitFlag % Save in V1
NOP
BEQ     V1, R0, .End % If the player isn't inside the Pit go to End
NOP
LAHU    T0, $TotalDamage_Received
ADDU    T0, T0, V0 % Sum current Damage Received in the Total one
SAH     T0, $TotalDamage_Received
.End
POP     RA, V1
SH      V0, 0180 (S4) % Amount Received
J       80277B6C
SH	    V0, 01F8 (S3)
}%/

@Hook 1A1B54 % 80273274 % Used when reciving damage when landing on Spikes, an Ember, while being Poisoned, etc
{
PUSH	RA, V1
JAL     $Function_CheckPitFlag % Save in V1
NOP
BEQ     V1, R0, .End % If the player isn't inside the Pit go to End
NOP
LAHU    T0, $TotalDamage_Received
ADDU    T0, T0, V0 % Sum current Damage Received in the Total one
SAH     T0, $TotalDamage_Received
.End
POP     RA, V1
SH	    V0, 0180 (S3) % Amount Received
J       8027327C
LBU	    V0, 01B8 (S0)
}%/

@Hook FB70C % 802D6D5C % When using an Item
{
% Check if the Player is inside the Pit
PUSH	RA, V1
JAL     $Function_CheckPitFlag % Save in V1
NOP
BEQ     V1, R0, .End % If the player isn't inside the Pit go to End
NOP
LAB     T0, $TotalItemsUsed
ADDIU   T1, R0, 1
ADDU    T0, T0, T1
SAB     T0, $TotalItemsUsed
.End
POP 	RA, V1
CVT.S.W	F0, F0
J       802D6D64
MFC1	A1, F0
}%/

% *out = V1
#new:Function $Function_CheckPitFlag
{
PUSH	RA, V0, A0, A1, A2, A3
LIO 	A1, *PitFlag
JAL 	~Func:get_variable 
NOP
COPY    V1, V0 % Copy V0 in V1
POP		RA, V0, A0, A1, A2, A3
JR 		RA
NOP
}

% 8010F54C - Game Timer (32-bit)
/% 80074094 - Event ID
00= Overworld
01= Mario is in a battle
02= Game Paused%/

% Advance timer
@Hook 1B78 % 80026778
{
PUSH	RA, V0, V1, A0, A1, A2
% Check if the Player is inside the Pit
JAL     $Function_CheckPitFlag % Save in V1
NOP
BNE     V1, R0, .CheckPause % If the player is inside the Pit
NOP
% Isn't inside the Pit check if is inside the Black Pit
LIO     A1, *Flag_BlackPit
JAL     ~Func:get_variable
RESERVED
BEQ     V0, R0, .End
NOP
.CheckPause
LAB     T0, 80074094 % EventID
ADDIU   T1, R0, 2 % Pause
BEQ     T0, T1, .End % If the game is paused, don't advance the timers
NOP
% Advance the timer - Total Timer
ADDIU   T1, R0, 3 % Used to Advance the Milliseconds
ADDIU   T4, R0, 1 % Used to Advance ss/mm/hh
LIO     T2, $Timer_Total % Save Address on T2
LB      T0, 3 (T2) % Load just the milliseconds
% Check if is time to advance the seconds
SLTI    T3, T0, 55 % 56/86 = 1 Second has passed
BEQL    T3, R0, .MoveSeconds % If ms aren't below 30 it means a second has passed
ADDIU   T0, R0, 0 % Set MS back to 0
ADDU    T0, T0, T1
.MoveMilliseconds
BEQ     R0, R0, .FloorTimer
SB      T0, 3 (T2) % Advance Milliseconds
.MoveSeconds
SB      T0, 3 (T2) % Reset Milli back to 0
LB      T0, 2 (T2) % Load seconds
%% Check if is time to advance the minutes
SLTI    T3, T0, 3B % 3C/60 = 1 min has passed
BEQL    T3, R0, .MoveMinutes % If seconds aren't below 60 it means a minute has passed
ADDIU   T0, R0, 0 % Set seconds back to 0
ADDU    T0, T0, T4
BEQ     R0, R0, .FloorTimer
SB      T0, 2 (T2) % Advance Seconds
.MoveMinutes
SB      T0, 2 (T2) % Reset seconds back to 0
LB      T0, 1 (T2) % Load minutes
%% Check if is time to advance the hours
SLTI    T3, T0, 3B % 3C/60 = 1 min has passed
BEQL    T3, R0, .MoveHours % If minutes aren't below 60 it means an hour has passed
ADDIU   T0, R0, 0 % Set Hours back to 0
ADDU    T0, T0, T4
BEQ     R0, R0, .FloorTimer
SB      T0, 1 (T2) % Advance minutes
.MoveHours
SB      T0, 1 (T2) % Reset minutes back to 0
LB      T0, 0 (T2) % Load hours
ADDU    T0, T0, T4
BEQ     R0, R0, .FloorTimer
SB      T0, 0 (T2) % Advance hours
.FloorTimer
% Handle the timer used by each floor, maybe I can put the time formater on a JAL to save some lines, but whatever ;)
% Advance the timer - Floor Timer
ADDIU   T1, R0, 3 % Used to Advance the Milliseconds
ADDIU   T4, R0, 1 % Used to Advance ss/mm/hh
LIO     T2, $Timer_Floor % Save Address on T2
LB      T0, 3 (T2) % Load just the milliseconds
% Check if is time to advance the seconds
SLTI    T3, T0, 55 % 56/86 = 1 Second has passed
BEQL    T3, R0, .MoveSeconds2 % If ms aren't below 30 it means a second has passed
ADDIU   T0, R0, 0 % Set MS back to 0
ADDU    T0, T0, T1
.MoveMilliseconds2
BEQ     R0, R0, .End
SB      T0, 3 (T2) % Advance Milliseconds
.MoveSeconds2
SB      T0, 3 (T2) % Reset Milli back to 0
LB      T0, 2 (T2) % Load seconds
%% Check if is time to advance the minutes
SLTI    T3, T0, 3B % 3C/60 = 1 min has passed
BEQL    T3, R0, .MoveMinutes2 % If seconds aren't below 60 it means a minute has passed
ADDIU   T0, R0, 0 % Set seconds back to 0
ADDU    T0, T0, T4
BEQ     R0, R0, .End
SB      T0, 2 (T2) % Advance Seconds
.MoveMinutes2
SB      T0, 2 (T2) % Reset seconds back to 0
LB      T0, 1 (T2) % Load minutes
%% Check if is time to advance the hours
SLTI    T3, T0, 3B % 3C/60 = 1 min has passed
BEQL    T3, R0, .MoveHours2 % If minutes aren't below 60 it means an hour has passed
ADDIU   T0, R0, 0 % Set Hours back to 0
ADDU    T0, T0, T4
BEQ     R0, R0, .End
SB      T0, 1 (T2) % Advance minutes
.MoveHours2
SB      T0, 1 (T2) % Reset minutes back to 0
LB      T0, 0 (T2) % Load hours
ADDU    T0, T0, T4
BEQ     R0, R0, .End
SB      T0, 0 (T2) % Advance hours
.End
POP		RA, V0, V1, A0, A1, A2
ORI	    A0, A0, E5FF
J       80026780
ADDIU	V0, V0, 2
}

% Save Star Spirits used
@Hook 1AF27C % 8028099C
{
    PUSH    RA, A0, A1, A2, A3, V0, V1
    % V0 = Amount of Star Power to sub
    BEQ     V0, R0, .End
    NOP
    LIO     A1, *StarSpiritsUsedInPit
    JAL     ~Func:get_variable
    RESERVED
    % Check FF cap
    SLTIU   A1, V0, FF
    BEQL    A1, R0, .FF
    ADDIU   A2, R0, FF
    ADDIU   A2, V0, 1
    .FF
    LIO     A1, *StarSpiritsUsedInPit
    JAL     ~Func:set_variable
    RESERVED
    .End
    POP     RA, A0, A1, A2, A3, V0, V1
    SH      V1, 0290 (A0)
    J       802809A4
    LH	    S0, 017A (A1)
}%/

% Save total partners turns used
@Hook 175500 % 80246C20
{
    PUSH    RA, A0, A1, A2, A3, V0, V1
    LIO     A1, *PartnersTurnsUsed
    JAL     ~Func:get_variable
    RESERVED
    % Check FF cap
    SLTIU   A1, V0, FF
    BEQL    A1, R0, .FF
    ADDIU   A2, R0, FF
    ADDIU   A2, V0, 1
    .FF
    LIO     A1, *PartnersTurnsUsed
    JAL     ~Func:set_variable
    RESERVED
    .End
    POP     RA, A0, A1, A2, A3, V0, V1
    ORI	    V0, V0, 0010
    J       80246C28
    AND	    V1, V1, A0
}%/

% Enemies Tattles - Flag_Cheev_Global_25
% Track if the player have all tattles to complete this challenge
/%
    800DBEDD - 800DBEFC (Tattle Flags Range)
    831BE8C6 DEFE560F E018A008 00000000
    00000000 00000000 0000F053 FFEB1F00

    At least this bits need to be true after the player tattled
    every enemy. (Mistar & the Blue Bandit aren't neccesary)
    List of enemies found at $TattleActorIDList in ActorList.patch
%/
@Hook 182724 { % 80253E44
    PUSH    RA, A0, A1, A2, A3, V0, V1, T0, T1, T2, s0
    JAL     $GetTotalTattlesCollected
    NOP
    ADDU s0, v0, r0
    JAL $GetTotalTattleCount
    NOP
    BNE s0, v0, .notAllTattles
    NOP
    LIO     A1, *Flag_Cheev_Global_25
    JAL     ~Func:set_variable
    ORI     A2, R0, 1
    .notAllTattles
    POP     RA, A0, A1, A2, A3, V0, V1, T0, T1, T2, s0
    % vanilla code
    OR	    V0, V0, S2
    J       80253E4C
    SB	    V0, 0440 (V1)
}

% Same thing as above but his is for enemies that has multiple groups on the same tattle
@Hook 1826B0 { %80253DD0
    PUSH    RA, A0, A1, A2, A3, V0, V1, T0, T1, T2, s0
    JAL     $GetTotalTattlesCollected
    NOP
    ADDU s0, v0, r0
    JAL $GetTotalTattleCount
    NOP
    BNE s0, v0, .notAllTattles
    NOP
    LIO     A1, *Flag_Cheev_Global_25
    JAL     ~Func:set_variable
    ORI     A2, R0, 1
    .notAllTattles
    POP     RA, A0, A1, A2, A3, V0, V1, T0, T1, T2, s0
    % vanilla code
    OR	    V0, V0, S2
    J       80253DD8
    SB	    V0, 0440 (S0)
}

% Save amount of turns passed in the entire Black Pit
@Hook 170EC0 % 802425E0
{
    PUSH    RA
    JAL     $TrackTurns
    NOP
    POP     RA
    % restore vanilla code
    LAW     V1, 800DC4DC
    J       802425E8
    RESERVED
}%/

/% unused
@Hook 79FF0 % 800E0B40
{
PUSH	RA
JAL		$ResetTurns
NOP
POP		RA
LB	    V0, 0070 (V0)
J	    800E0B48
LUI	    A0, 8011
}%/

/%800DC077
Remaining Turns (Battle)
Bit0=Mario won the battle!
Bit1=Turn used - Mario
Bit2=Turn used - Partner
Bit3=Using his turn - Mario
Bit4=Using his turn - Partner%/

/%80074094
Event ID
00= Overworld
01= Mario is in a battle
02= Game Paused
%/

#new:Data $BP_TotalTurns
{ 00 }

#export $BP_TotalTurns

% Used only inside the Black Pit
% This function track the amount of turns taked in a battle
#new:Function $TrackTurns
{
PUSH 	RA, A0, A1, A2, A3, V0, V1, T0, T1
% Check if the player is inside the Black Pit
LIO     A1, *Flag_BlackPit
JAL     ~Func:get_variable
RESERVED
BEQ     V0, R0, .Nuke % isn't inside the black pit
NOP
.Add1toCurrentTurns
LABU	T0, $BP_TotalTurns % Amount of Turns tooked in this battle ( 1 Turn = Mario + Partner has used their turns )
% Total turns is already the max value?
ORI     T1, R0, FF
BEQ     T0, T1, .MaxAmount
NOP
ADDIU	T0, T0, 1
.MaxAmount
SAB		T0, $BP_TotalTurns
BEQ		R0, R0, .Pop
RESERVED
.Nuke
SAB     R0, $BP_TotalTurns
.Pop
POP 	RA, A0, A1, A2, A3, V0, V1, T0, T1
JR	    RA
NOP
}

/% unused
#new:Function $ResetTurns % This function reset the amount of turns from the last battle
{
PUSH	T0, T1
LAB		T0, 80074094
ADDIU	T1, R0, 1
BEQ		T0, T1, .Finish % Check if Mario is still inside a Battle
NOP
SAB		R0, 8010F2A5
.Finish
POP		T0, T1
JR	    RA
NOP
}%/
